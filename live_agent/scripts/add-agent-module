#!/usr/bin/env python3
import sys
import argparse
import shutil
from pathlib import Path
import live_agent

__all__ = []
TEMPLATES_DIRNAME = "templates"
MODULES_DIRNAME = "modules"
MODULE_INIT = "module/__init__.py"


def parse_arguments(argv):
    parser = argparse.ArgumentParser(description="Bootstraps a new agent module")
    parser.add_argument("name", help="Name of the new module")
    return parser.parse_args(argv[1:])


def find_templates_dir():
    lib_path = Path(live_agent.__file__)
    lib_root = lib_path.parent
    return lib_root.joinpath(TEMPLATES_DIRNAME)


def get_module_root(args):
    module_root = args.name
    in_modules_dir = Path.cwd().is_dir and Path.cwd().root == MODULES_DIRNAME
    if not in_modules_dir:
        module_root = f"{MODULES_DIRNAME}/{module_root}"

        print(f"Creating folder {MODULES_DIRNAME}")
        Path(MODULES_DIRNAME).mkdir(exist_ok=True)

    return module_root


if __name__ == "__main__":
    """
    Command which bootstraps a new module. Requires the module name and creates a folder
    containing the default structure for a module, which is:
    - `__init__.py` containing empty definitions for `PROCESSES` and `REQUIREMENTS`
    - `logic_adapters` folder
    - `monitors` folder
    - `datasources` folder
    """

    args = parse_arguments(sys.argv)
    module_root = get_module_root(args)

    print(f"Creating folder {module_root}")
    Path(f"{module_root}").mkdir(exist_ok=True)

    print(f"Creating folder {module_root}/logic_adapters")
    Path(f"{module_root}/logic_adapters").mkdir(exist_ok=True)

    print(f"Creating folder {module_root}/monitors")
    Path(f"{module_root}/monitors").touch(exist_ok=True)

    print(f"Creating folder {module_root}/datasources")
    Path(f"{module_root}/datasources").touch(exist_ok=True)

    templates_dir = find_templates_dir()

    print(f"Creating folder {module_root}/__init__.py")
    shutil.copy2(templates_dir.joinpath(MODULE_INIT), f"{module_root}/__init__.py")

    print("done")
